//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace N3O.Umbraco.Crm.Engage.Clients
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICrowdfundingClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> CreateCampaignAsync(string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, CreateCampaignReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> CreateCampaignAsync(string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, CreateCampaignReq body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CampaignRes> GetCampaignByIdAsync(string campaignId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CampaignRes> GetCampaignByIdAsync(string campaignId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CrowdfunderRes> GetCrowdfunderByIdAsync(string crowdfunderId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CrowdfunderRes> GetCrowdfunderByIdAsync(string crowdfunderId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SyncCrowdfunderAsync(string crowdfunderRevisionId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, SyncCrowdfunderReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SyncCrowdfunderAsync(string crowdfunderRevisionId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, SyncCrowdfunderReq body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> CreateFundraiserAsync(string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, CreateFundraiserReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> CreateFundraiserAsync(string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, CreateFundraiserReq body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FundraiserRes> GetFundraiserByIdAsync(string fundraiserId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FundraiserRes> GetFundraiserByIdAsync(string fundraiserId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CrowdfundingClient : ICrowdfundingClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public CrowdfundingClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "/eu1/api/crowdfunding/";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> CreateCampaignAsync(string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, CreateCampaignReq body)
        {
            return CreateCampaignAsync(n3O_Ignore_Validation_Warnings, n3O_Service_Cache, n3O_Route_Key, n3O_Clock_Adjustment, n3O_Subscription_ID, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> CreateCampaignAsync(string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, CreateCampaignReq body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (n3O_Ignore_Validation_Warnings != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Ignore-Validation-Warnings", ConvertToString(n3O_Ignore_Validation_Warnings, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Service_Cache != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Service-Cache", ConvertToString(n3O_Service_Cache, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Route_Key != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Route-Key", ConvertToString(n3O_Route_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Clock_Adjustment != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Clock-Adjustment", ConvertToString(n3O_Clock_Adjustment, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Subscription_ID == null)
                        throw new System.ArgumentNullException("n3O_Subscription_ID");
                    request_.Headers.TryAddWithoutValidation("N3O-Subscription-ID", ConvertToString(n3O_Subscription_ID, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "public/v1.0/campaigns"
                    urlBuilder_.Append("public/v1.0/campaigns");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CampaignRes> GetCampaignByIdAsync(string campaignId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID)
        {
            return GetCampaignByIdAsync(campaignId, n3O_Ignore_Validation_Warnings, n3O_Service_Cache, n3O_Route_Key, n3O_Clock_Adjustment, n3O_Subscription_ID, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CampaignRes> GetCampaignByIdAsync(string campaignId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, System.Threading.CancellationToken cancellationToken)
        {
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (n3O_Ignore_Validation_Warnings != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Ignore-Validation-Warnings", ConvertToString(n3O_Ignore_Validation_Warnings, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Service_Cache != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Service-Cache", ConvertToString(n3O_Service_Cache, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Route_Key != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Route-Key", ConvertToString(n3O_Route_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Clock_Adjustment != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Clock-Adjustment", ConvertToString(n3O_Clock_Adjustment, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Subscription_ID == null)
                        throw new System.ArgumentNullException("n3O_Subscription_ID");
                    request_.Headers.TryAddWithoutValidation("N3O-Subscription-ID", ConvertToString(n3O_Subscription_ID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "public/v1.0/campaigns/{campaignId}"
                    urlBuilder_.Append("public/v1.0/campaigns/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CampaignRes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrowdfunderRes> GetCrowdfunderByIdAsync(string crowdfunderId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID)
        {
            return GetCrowdfunderByIdAsync(crowdfunderId, n3O_Ignore_Validation_Warnings, n3O_Service_Cache, n3O_Route_Key, n3O_Clock_Adjustment, n3O_Subscription_ID, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrowdfunderRes> GetCrowdfunderByIdAsync(string crowdfunderId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, System.Threading.CancellationToken cancellationToken)
        {
            if (crowdfunderId == null)
                throw new System.ArgumentNullException("crowdfunderId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (n3O_Ignore_Validation_Warnings != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Ignore-Validation-Warnings", ConvertToString(n3O_Ignore_Validation_Warnings, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Service_Cache != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Service-Cache", ConvertToString(n3O_Service_Cache, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Route_Key != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Route-Key", ConvertToString(n3O_Route_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Clock_Adjustment != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Clock-Adjustment", ConvertToString(n3O_Clock_Adjustment, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Subscription_ID == null)
                        throw new System.ArgumentNullException("n3O_Subscription_ID");
                    request_.Headers.TryAddWithoutValidation("N3O-Subscription-ID", ConvertToString(n3O_Subscription_ID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "public/v1.0/crowdfunders/{crowdfunderId}"
                    urlBuilder_.Append("public/v1.0/crowdfunders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(crowdfunderId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrowdfunderRes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task SyncCrowdfunderAsync(string crowdfunderRevisionId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, SyncCrowdfunderReq body)
        {
            return SyncCrowdfunderAsync(crowdfunderRevisionId, n3O_Ignore_Validation_Warnings, n3O_Service_Cache, n3O_Route_Key, n3O_Clock_Adjustment, n3O_Subscription_ID, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task SyncCrowdfunderAsync(string crowdfunderRevisionId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, SyncCrowdfunderReq body, System.Threading.CancellationToken cancellationToken)
        {
            if (crowdfunderRevisionId == null)
                throw new System.ArgumentNullException("crowdfunderRevisionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (n3O_Ignore_Validation_Warnings != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Ignore-Validation-Warnings", ConvertToString(n3O_Ignore_Validation_Warnings, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Service_Cache != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Service-Cache", ConvertToString(n3O_Service_Cache, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Route_Key != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Route-Key", ConvertToString(n3O_Route_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Clock_Adjustment != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Clock-Adjustment", ConvertToString(n3O_Clock_Adjustment, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Subscription_ID == null)
                        throw new System.ArgumentNullException("n3O_Subscription_ID");
                    request_.Headers.TryAddWithoutValidation("N3O-Subscription-ID", ConvertToString(n3O_Subscription_ID, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "public/v1.0/crowdfunders/{crowdfunderRevisionId}/sync"
                    urlBuilder_.Append("public/v1.0/crowdfunders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(crowdfunderRevisionId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> CreateFundraiserAsync(string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, CreateFundraiserReq body)
        {
            return CreateFundraiserAsync(n3O_Ignore_Validation_Warnings, n3O_Service_Cache, n3O_Route_Key, n3O_Clock_Adjustment, n3O_Subscription_ID, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> CreateFundraiserAsync(string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, CreateFundraiserReq body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (n3O_Ignore_Validation_Warnings != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Ignore-Validation-Warnings", ConvertToString(n3O_Ignore_Validation_Warnings, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Service_Cache != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Service-Cache", ConvertToString(n3O_Service_Cache, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Route_Key != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Route-Key", ConvertToString(n3O_Route_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Clock_Adjustment != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Clock-Adjustment", ConvertToString(n3O_Clock_Adjustment, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Subscription_ID == null)
                        throw new System.ArgumentNullException("n3O_Subscription_ID");
                    request_.Headers.TryAddWithoutValidation("N3O-Subscription-ID", ConvertToString(n3O_Subscription_ID, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "public/v1.0/fundraisers"
                    urlBuilder_.Append("public/v1.0/fundraisers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FundraiserRes> GetFundraiserByIdAsync(string fundraiserId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID)
        {
            return GetFundraiserByIdAsync(fundraiserId, n3O_Ignore_Validation_Warnings, n3O_Service_Cache, n3O_Route_Key, n3O_Clock_Adjustment, n3O_Subscription_ID, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FundraiserRes> GetFundraiserByIdAsync(string fundraiserId, string n3O_Ignore_Validation_Warnings, string n3O_Service_Cache, string n3O_Route_Key, string n3O_Clock_Adjustment, string n3O_Subscription_ID, System.Threading.CancellationToken cancellationToken)
        {
            if (fundraiserId == null)
                throw new System.ArgumentNullException("fundraiserId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (n3O_Ignore_Validation_Warnings != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Ignore-Validation-Warnings", ConvertToString(n3O_Ignore_Validation_Warnings, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Service_Cache != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Service-Cache", ConvertToString(n3O_Service_Cache, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Route_Key != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Route-Key", ConvertToString(n3O_Route_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Clock_Adjustment != null)
                        request_.Headers.TryAddWithoutValidation("N3O-Clock-Adjustment", ConvertToString(n3O_Clock_Adjustment, System.Globalization.CultureInfo.InvariantCulture));

                    if (n3O_Subscription_ID == null)
                        throw new System.ArgumentNullException("n3O_Subscription_ID");
                    request_.Headers.TryAddWithoutValidation("N3O-Subscription-ID", ConvertToString(n3O_Subscription_ID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "public/v1.0/fundraisers/{fundraiserId}"
                    urlBuilder_.Append("public/v1.0/fundraisers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(fundraiserId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FundraiserRes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountInfoRes
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("initials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Initials { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllocationRes
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Revision { get; set; }

        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Index { get; set; }

        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AllocationType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForexMoneyRes Value { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("taxReliefRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaxReliefRate? TaxReliefRate { get; set; }

        [Newtonsoft.Json.JsonProperty("fundDimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FundDimensionValuesRes FundDimensions { get; set; }

        [Newtonsoft.Json.JsonProperty("fund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FundAllocationRes Fund { get; set; }

        [Newtonsoft.Json.JsonProperty("feedback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeedbackAllocationRes Feedback { get; set; }

        [Newtonsoft.Json.JsonProperty("sponsorship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SponsorshipAllocationRes Sponsorship { get; set; }

        [Newtonsoft.Json.JsonProperty("pledge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PledgeInfoRes Pledge { get; set; }

        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

    }

    /// <summary>
    /// One of 'feedback', 'fund', 'sponsorship'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllocationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"feedback")]
        Feedback = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fund")]
        Fund = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"sponsorship")]
        Sponsorship = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllocationsRes
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Revision { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForexMoneyRes Total { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AllocationRes> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BeneficiaryInfoRes
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("scheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scheme { get; set; }

        [Newtonsoft.Json.JsonProperty("typeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalendarSystem
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("minYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinYear { get; set; }

        [Newtonsoft.Json.JsonProperty("maxYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxYear { get; set; }

        [Newtonsoft.Json.JsonProperty("eras", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Era> Eras { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignRes
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("revisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RevisionId { get; set; }

        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CrowdfunderType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CrowdfunderStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("pledgeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PledgeId { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyRes Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForexMoneyRes Value { get; set; }

        [Newtonsoft.Json.JsonProperty("allocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AllocationsRes Allocations { get; set; }

        [Newtonsoft.Json.JsonProperty("fundraiser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FundraiserInfoRes Fundraiser { get; set; }

        [Newtonsoft.Json.JsonProperty("canActivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanActivate { get; set; }

        [Newtonsoft.Json.JsonProperty("canDeactivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanDeactivate { get; set; }

        [Newtonsoft.Json.JsonProperty("canDelete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanDelete { get; set; }

        [Newtonsoft.Json.JsonProperty("hasEnded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasEnded { get; set; }

        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCampaignReq
    {
        [Newtonsoft.Json.JsonProperty("crowdfunder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateCrowdfunderReq Crowdfunder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCrowdfunderReq
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Currency? Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("allocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CrowdfunderAllocationsReq Allocations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFundraiserReq
    {
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account { get; set; }

        [Newtonsoft.Json.JsonProperty("crowdfunder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateCrowdfunderReq Crowdfunder { get; set; }

        [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CampaignId { get; set; }

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CrowdfunderAllocationReq
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AllocationType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyReq Value { get; set; }

        [Newtonsoft.Json.JsonProperty("fundDimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FundDimensionValuesReq FundDimensions { get; set; }

        [Newtonsoft.Json.JsonProperty("fund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewFundAllocationReq Fund { get; set; }

        [Newtonsoft.Json.JsonProperty("feedback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CrowdfunderFeedbackReq Feedback { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CrowdfunderAllocationsReq
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrowdfunderAllocationReq> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CrowdfunderFeedbackReq
    {
        [Newtonsoft.Json.JsonProperty("scheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scheme { get; set; }

        [Newtonsoft.Json.JsonProperty("customFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NewCustomFieldReq> CustomFields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CrowdfunderNameReq
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CrowdfunderRes
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("revisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RevisionId { get; set; }

        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CrowdfunderType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CrowdfunderStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("pledgeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PledgeId { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyRes Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForexMoneyRes Value { get; set; }

        [Newtonsoft.Json.JsonProperty("allocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AllocationsRes Allocations { get; set; }

        [Newtonsoft.Json.JsonProperty("fundraiser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FundraiserInfoRes Fundraiser { get; set; }

        [Newtonsoft.Json.JsonProperty("canActivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanActivate { get; set; }

        [Newtonsoft.Json.JsonProperty("canDeactivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanDeactivate { get; set; }

        [Newtonsoft.Json.JsonProperty("canDelete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanDelete { get; set; }

        [Newtonsoft.Json.JsonProperty("hasEnded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasEnded { get; set; }

        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }

    }

    /// <summary>
    /// One of 'active', 'draft', 'ended', 'inactive'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CrowdfunderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ended")]
        Ended = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"inactive")]
        Inactive = 3,

    }

    /// <summary>
    /// One of 'campaign', 'fundraiser'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CrowdfunderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"campaign")]
        Campaign = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fundraiser")]
        Fundraiser = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CrowdfunderUrlReq
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// One of 'ADF', 'ADP', 'AED', 'AFA', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'AOK', 'AON', 'AOR', 'ARA', 'ARL', 'ARP', 'ARS', 'ARY', 'ATS', 'AUD', 'AWG', 'AZM', 'AZN', 'BAD', 'BAM', 'BBD', 'BDT', 'BEF', 'BGJ', 'BGK', 'BGL', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOP', 'BOV', 'BRB', 'BRC', 'BRE', 'BRL', 'BRN', 'BRR', 'BSD', 'BTN', 'BUK', 'BWP', 'BYB', 'BYN', 'BYR', 'BZD', 'CAD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLE', 'CLF', 'CLP', 'CNY', 'COP', 'COU', 'CRC', 'CSD', 'CSJ', 'CSK', 'CUC', 'CUP', 'CVE', 'CYP', 'CZK', 'DDM', 'DEM', 'DJF', 'DKK', 'DOP', 'DZD', 'ECS', 'ECV', 'EEK', 'EGP', 'ERN', 'ESA', 'ESB', 'ESP', 'ETB', 'EUR', 'FIM', 'FJD', 'FKP', 'FRF', 'GBP', 'GEL', 'GHC', 'GHS', 'GIP', 'GMD', 'GNE', 'GNF', 'GNS', 'GQE', 'GRD', 'GTQ', 'GWE', 'GWP', 'GYD', 'HKD', 'HNL', 'HRD', 'HRK', 'HTG', 'HUF', 'IDR', 'IEP', 'ILP', 'ILR', 'ILS', 'INR', 'IQD', 'IRR', 'ISJ', 'ISK', 'ITL', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAJ', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LSM', 'LTL', 'LUF', 'LVL', 'LYD', 'MAD', 'MAF', 'MCF', 'MDL', 'MGA', 'MGF', 'MKD', 'MKN', 'MLF', 'MMK', 'MNT', 'MOP', 'MRO', 'MRU', 'MTL', 'MTP', 'MUR', 'MVQ', 'MVR', 'MWK', 'MXN', 'MXP', 'MXV', 'MYR', 'MZE', 'MZM', 'MZN', 'NAD', 'NFD', 'NGN', 'NIC', 'NIO', 'NLG', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEH', 'PEI', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PLZ', 'PTE', 'PTP', 'PYG', 'QAR', 'RHD', 'ROK', 'ROL', 'RON', 'RSD', 'RUB', 'RUR', 'RWF', 'SAR', 'SBD', 'SCR', 'SDD', 'SDG', 'SDP', 'SEK', 'SGD', 'SHP', 'SIT', 'SKK', 'SLL', 'SML', 'SOS', 'SRD', 'SRG', 'SSP', 'STD', 'STN', 'SUR', 'SVC', 'SYP', 'SZL', 'THB', 'TJR', 'TJS', 'TMM', 'TMT', 'TND', 'TNF', 'TOP', 'TPE', 'TRL', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH', 'UAK', 'UGS', 'UGW', 'UGX', 'USD', 'USN', 'USS', 'UYI', 'UYN', 'UYP', 'UYU', 'UYW', 'UZS', 'VAL', 'VEB', 'VEF', 'VES', 'VNC', 'VND', 'VUV', 'WST', 'XAF', 'XAG', 'XAU', 'XBA', 'XBB', 'XBC', 'XBD', 'XCD', 'XDR', 'XEU', 'XFO', 'XFU', 'XOF', 'XPD', 'XPF', 'XPT', 'XSU', 'XTS', 'XUA', 'XXX', 'YDD', 'YER', 'YUD', 'YUG', 'YUM', 'YUN', 'YUO', 'YUR', 'ZAL', 'ZAR', 'ZMK', 'ZMW', 'ZRN', 'ZRZ', 'ZWC', 'ZWD', 'ZWL', 'ZWN', 'ZWR'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Currency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADF")]
        ADF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADP")]
        ADP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
        AED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AFA")]
        AFA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
        AFN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
        AMD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
        ANG = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
        AOA = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AOK")]
        AOK = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AON")]
        AON = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AOR")]
        AOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ARA")]
        ARA = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ARL")]
        ARL = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ARP")]
        ARP = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
        ARS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ARY")]
        ARY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ATS")]
        ATS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
        AWG = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"AZM")]
        AZM = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
        AZN = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BAD")]
        BAD = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
        BAM = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
        BBD = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
        BDT = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BEF")]
        BEF = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BGJ")]
        BGJ = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BGK")]
        BGK = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BGL")]
        BGL = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
        BHD = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
        BIF = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
        BMD = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
        BND = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
        BOB = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BOP")]
        BOP = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BOV")]
        BOV = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"BRB")]
        BRB = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"BRC")]
        BRC = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"BRE")]
        BRE = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
        BRL = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"BRN")]
        BRN = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"BRR")]
        BRR = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
        BSD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"BTN")]
        BTN = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"BUK")]
        BUK = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
        BWP = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"BYB")]
        BYB = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"BYN")]
        BYN = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"BYR")]
        BYR = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
        BZD = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
        CDF = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CHE")]
        CHE = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"CHW")]
        CHW = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CLE")]
        CLE = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CLF")]
        CLF = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
        CLP = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
        COP = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"COU")]
        COU = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
        CRC = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"CSD")]
        CSD = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"CSJ")]
        CSJ = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"CSK")]
        CSK = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"CUC")]
        CUC = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
        CUP = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
        CVE = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"CYP")]
        CYP = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"DDM")]
        DDM = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"DEM")]
        DEM = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
        DJF = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
        DOP = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
        DZD = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"ECS")]
        ECS = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"ECV")]
        ECV = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"EEK")]
        EEK = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
        EGP = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
        ERN = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"ESA")]
        ESA = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"ESB")]
        ESB = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"ESP")]
        ESP = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
        ETB = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"FIM")]
        FIM = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
        FJD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
        FKP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"FRF")]
        FRF = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
        GEL = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GHC")]
        GHC = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
        GHS = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
        GIP = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
        GMD = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"GNE")]
        GNE = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
        GNF = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"GNS")]
        GNS = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"GQE")]
        GQE = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"GRD")]
        GRD = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
        GTQ = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"GWE")]
        GWE = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"GWP")]
        GWP = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
        GYD = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
        HNL = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"HRD")]
        HRD = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"HRK")]
        HRK = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
        HTG = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
        IDR = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"IEP")]
        IEP = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"ILP")]
        ILP = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"ILR")]
        ILR = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
        INR = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
        IQD = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
        IRR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"ISJ")]
        ISJ = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
        ISK = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"ITL")]
        ITL = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
        JMD = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
        JOD = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
        KES = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
        KGS = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
        KHR = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
        KMF = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
        KPW = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
        KRW = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
        KWD = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
        KYD = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
        KZT = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"LAJ")]
        LAJ = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
        LAK = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
        LBP = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
        LKR = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
        LRD = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
        LSL = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"LSM")]
        LSM = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"LTL")]
        LTL = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"LUF")]
        LUF = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"LVL")]
        LVL = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
        LYD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
        MAD = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MAF")]
        MAF = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"MCF")]
        MCF = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
        MDL = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
        MGA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MGF")]
        MGF = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
        MKD = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"MKN")]
        MKN = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"MLF")]
        MLF = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
        MMK = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
        MNT = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
        MOP = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"MRO")]
        MRO = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"MRU")]
        MRU = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"MTL")]
        MTL = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"MTP")]
        MTP = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
        MUR = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"MVQ")]
        MVQ = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
        MVR = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
        MWK = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"MXP")]
        MXP = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"MXV")]
        MXV = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
        MYR = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"MZE")]
        MZE = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"MZM")]
        MZM = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
        MZN = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
        NAD = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"NFD")]
        NFD = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
        NGN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"NIC")]
        NIC = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
        NIO = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"NLG")]
        NLG = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
        NPR = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
        OMR = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
        PAB = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"PEH")]
        PEH = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"PEI")]
        PEI = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
        PEN = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
        PGK = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
        PKR = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"PLZ")]
        PLZ = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"PTE")]
        PTE = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"PTP")]
        PTP = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
        PYG = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
        QAR = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"RHD")]
        RHD = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"ROK")]
        ROK = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"ROL")]
        ROL = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
        RSD = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"RUR")]
        RUR = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
        RWF = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
        SAR = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
        SBD = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
        SCR = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"SDD")]
        SDD = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SDG")]
        SDG = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"SDP")]
        SDP = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
        SHP = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SIT")]
        SIT = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SKK")]
        SKK = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"SLL")]
        SLL = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SML")]
        SML = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
        SOS = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
        SRD = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"SRG")]
        SRG = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"SSP")]
        SSP = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"STD")]
        STD = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"STN")]
        STN = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"SUR")]
        SUR = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"SVC")]
        SVC = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
        SYP = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
        SZL = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
        THB = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TJR")]
        TJR = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
        TJS = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TMM")]
        TMM = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"TMT")]
        TMT = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
        TND = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"TNF")]
        TNF = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
        TOP = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"TPE")]
        TPE = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"TRL")]
        TRL = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
        TTD = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
        TWD = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
        TZS = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
        UAH = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"UAK")]
        UAK = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"UGS")]
        UGS = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"UGW")]
        UGW = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
        UGX = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"USN")]
        USN = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"USS")]
        USS = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
        UYI = 250,

        [System.Runtime.Serialization.EnumMember(Value = @"UYN")]
        UYN = 251,

        [System.Runtime.Serialization.EnumMember(Value = @"UYP")]
        UYP = 252,

        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
        UYU = 253,

        [System.Runtime.Serialization.EnumMember(Value = @"UYW")]
        UYW = 254,

        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
        UZS = 255,

        [System.Runtime.Serialization.EnumMember(Value = @"VAL")]
        VAL = 256,

        [System.Runtime.Serialization.EnumMember(Value = @"VEB")]
        VEB = 257,

        [System.Runtime.Serialization.EnumMember(Value = @"VEF")]
        VEF = 258,

        [System.Runtime.Serialization.EnumMember(Value = @"VES")]
        VES = 259,

        [System.Runtime.Serialization.EnumMember(Value = @"VNC")]
        VNC = 260,

        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
        VND = 261,

        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
        VUV = 262,

        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
        WST = 263,

        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
        XAF = 264,

        [System.Runtime.Serialization.EnumMember(Value = @"XAG")]
        XAG = 265,

        [System.Runtime.Serialization.EnumMember(Value = @"XAU")]
        XAU = 266,

        [System.Runtime.Serialization.EnumMember(Value = @"XBA")]
        XBA = 267,

        [System.Runtime.Serialization.EnumMember(Value = @"XBB")]
        XBB = 268,

        [System.Runtime.Serialization.EnumMember(Value = @"XBC")]
        XBC = 269,

        [System.Runtime.Serialization.EnumMember(Value = @"XBD")]
        XBD = 270,

        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
        XCD = 271,

        [System.Runtime.Serialization.EnumMember(Value = @"XDR")]
        XDR = 272,

        [System.Runtime.Serialization.EnumMember(Value = @"XEU")]
        XEU = 273,

        [System.Runtime.Serialization.EnumMember(Value = @"XFO")]
        XFO = 274,

        [System.Runtime.Serialization.EnumMember(Value = @"XFU")]
        XFU = 275,

        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
        XOF = 276,

        [System.Runtime.Serialization.EnumMember(Value = @"XPD")]
        XPD = 277,

        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
        XPF = 278,

        [System.Runtime.Serialization.EnumMember(Value = @"XPT")]
        XPT = 279,

        [System.Runtime.Serialization.EnumMember(Value = @"XSU")]
        XSU = 280,

        [System.Runtime.Serialization.EnumMember(Value = @"XTS")]
        XTS = 281,

        [System.Runtime.Serialization.EnumMember(Value = @"XUA")]
        XUA = 282,

        [System.Runtime.Serialization.EnumMember(Value = @"XXX")]
        XXX = 283,

        [System.Runtime.Serialization.EnumMember(Value = @"YDD")]
        YDD = 284,

        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
        YER = 285,

        [System.Runtime.Serialization.EnumMember(Value = @"YUD")]
        YUD = 286,

        [System.Runtime.Serialization.EnumMember(Value = @"YUG")]
        YUG = 287,

        [System.Runtime.Serialization.EnumMember(Value = @"YUM")]
        YUM = 288,

        [System.Runtime.Serialization.EnumMember(Value = @"YUN")]
        YUN = 289,

        [System.Runtime.Serialization.EnumMember(Value = @"YUO")]
        YUO = 290,

        [System.Runtime.Serialization.EnumMember(Value = @"YUR")]
        YUR = 291,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAL")]
        ZAL = 292,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 293,

        [System.Runtime.Serialization.EnumMember(Value = @"ZMK")]
        ZMK = 294,

        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
        ZMW = 295,

        [System.Runtime.Serialization.EnumMember(Value = @"ZRN")]
        ZRN = 296,

        [System.Runtime.Serialization.EnumMember(Value = @"ZRZ")]
        ZRZ = 297,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWC")]
        ZWC = 298,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWD")]
        ZWD = 299,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWL")]
        ZWL = 300,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWN")]
        ZWN = 301,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWR")]
        ZWR = 302,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyRes
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Era
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeedbackAllocationRes
    {
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("scheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scheme { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForexMoneyRes
    {
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyRes Base { get; set; }

        [Newtonsoft.Json.JsonProperty("quote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyRes Quote { get; set; }

        [Newtonsoft.Json.JsonProperty("exchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FundAllocationRes
    {
        [Newtonsoft.Json.JsonProperty("donationItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DonationItem { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FundDimensionValues
    {
        [Newtonsoft.Json.JsonProperty("dimension1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension1 { get; set; }

        [Newtonsoft.Json.JsonProperty("dimension2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension2 { get; set; }

        [Newtonsoft.Json.JsonProperty("dimension3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension3 { get; set; }

        [Newtonsoft.Json.JsonProperty("dimension4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension4 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FundDimensionValuesReq
    {
        [Newtonsoft.Json.JsonProperty("dimension1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension1 { get; set; }

        [Newtonsoft.Json.JsonProperty("dimension2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension2 { get; set; }

        [Newtonsoft.Json.JsonProperty("dimension3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension3 { get; set; }

        [Newtonsoft.Json.JsonProperty("dimension4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension4 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FundDimensionValuesRes
    {
        [Newtonsoft.Json.JsonProperty("dimension1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension1 { get; set; }

        [Newtonsoft.Json.JsonProperty("dimension2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension2 { get; set; }

        [Newtonsoft.Json.JsonProperty("dimension3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension3 { get; set; }

        [Newtonsoft.Json.JsonProperty("dimension4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension4 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FundraiserInfoRes
    {
        [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CampaignId { get; set; }

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FundraiserRes
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("revisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RevisionId { get; set; }

        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CrowdfunderType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CrowdfunderStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("pledgeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PledgeId { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyRes Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForexMoneyRes Value { get; set; }

        [Newtonsoft.Json.JsonProperty("allocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AllocationsRes Allocations { get; set; }

        [Newtonsoft.Json.JsonProperty("fundraiser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FundraiserInfoRes Fundraiser { get; set; }

        [Newtonsoft.Json.JsonProperty("canActivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanActivate { get; set; }

        [Newtonsoft.Json.JsonProperty("canDeactivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanDeactivate { get; set; }

        [Newtonsoft.Json.JsonProperty("canDelete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanDelete { get; set; }

        [Newtonsoft.Json.JsonProperty("hasEnded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasEnded { get; set; }

        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }

        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInfoRes Account { get; set; }

        [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CampaignId { get; set; }

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IsoDayOfWeek
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyReq
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Currency? Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyRes
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Currency? Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewCustomFieldReq
    {
        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("bool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Bool { get; set; }

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewFundAllocationReq
    {
        [Newtonsoft.Json.JsonProperty("donationItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DonationItem { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PledgeInfoRes
    {
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Price
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Locked { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pricing
    {
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Price Price { get; set; }

        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PricingRule> Rules { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricingRule
    {
        [Newtonsoft.Json.JsonProperty("fundDimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FundDimensionValues FundDimensions { get; set; }

        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Price Price { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReferenceType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    /// <summary>
    /// One of 'AC', 'AL', 'AS', 'AT', 'BD', 'BP', 'BX', 'CA', 'CC', 'CF', 'CL', 'CM', 'CO', 'CR', 'CS', 'DD', 'DE', 'DF', 'DI', 'DN', 'DQ', 'DR', 'DS', 'DT', 'EM', 'FB', 'FO', 'FS', 'HH', 'LG', 'LH', 'LS', 'OB', 'PC', 'PL', 'PM', 'PR', 'RC', 'RF', 'RG', 'RI', 'RP', 'SB', 'SC', 'SG', 'SH', 'SM', 'SP', 'SS', 'TC', 'TD', 'TG', 'TI', 'TK', 'TM', 'TR', 'WH'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AC")]
        AC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BP")]
        BP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"BX")]
        BX = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CS")]
        CS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"DD")]
        DD = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DF")]
        DF = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DI")]
        DI = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"DN")]
        DN = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"DQ")]
        DQ = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"DR")]
        DR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"DS")]
        DS = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"DT")]
        DT = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"EM")]
        EM = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"FB")]
        FB = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"FS")]
        FS = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"HH")]
        HH = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"LG")]
        LG = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"LH")]
        LH = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"OB")]
        OB = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"PC")]
        PC = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"RC")]
        RC = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"RF")]
        RF = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"RG")]
        RG = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"RI")]
        RI = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"RP")]
        RP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SP")]
        SP = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"TI")]
        TI = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"WH")]
        WH = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SponsorshipAllocationRes
    {
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("scheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scheme { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BeneficiaryInfoRes Beneficiary { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SyncCrowdfunderReq
    {
        [Newtonsoft.Json.JsonProperty("allocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CrowdfunderAllocationsReq Allocations { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CrowdfunderNameReq Name { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CrowdfunderUrlReq Url { get; set; }

        [Newtonsoft.Json.JsonProperty("activate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Activate { get; set; }

        [Newtonsoft.Json.JsonProperty("deactivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deactivate { get; set; }

    }

    /// <summary>
    /// One of 'full', 'zero'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxReliefRate
    {

        [System.Runtime.Serialization.EnumMember(Value = @"full")]
        Full = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"zero")]
        Zero = 1,

    }



}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625