//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace N3O.Umbraco.Cloud.Engage.Clients
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAccountsClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> CreateAccountAsync(ConnectAccountReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> CreateAccountAsync(ConnectAccountReq body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByCriteriaAsync(ConnectAccountCriteria body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByCriteriaAsync(ConnectAccountCriteria body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByEmailAsync(string emailAddress);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByEmailAsync(string emailAddress, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByTelephoneAsync(string telephoneNumber);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByTelephoneAsync(string telephoneNumber, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConnectAccountRes> GetAccountCreatedStatusAsync(string accountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConnectAccountRes> GetAccountCreatedStatusAsync(string accountId, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task NewsletterSignupAsync(string category, string email);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task NewsletterSignupAsync(string category, string email, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAccountAsync(string accountId, ConnectAccountReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAccountAsync(string accountId, ConnectAccountReq body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountsClient : IAccountsClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AccountsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "/eu1/api/accounts/";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> CreateAccountAsync(ConnectAccountReq body)
        {
            return CreateAccountAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> CreateAccountAsync(ConnectAccountReq body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "connect/v1.0/accounts"
                    urlBuilder_.Append("connect/v1.0/accounts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByCriteriaAsync(ConnectAccountCriteria body)
        {
            return FindMatchesByCriteriaAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByCriteriaAsync(ConnectAccountCriteria body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "connect/v1.0/accounts/find"
                    urlBuilder_.Append("connect/v1.0/accounts/find");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConnectAccountRes>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByEmailAsync(string emailAddress)
        {
            return FindMatchesByEmailAsync(emailAddress, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByEmailAsync(string emailAddress, System.Threading.CancellationToken cancellationToken)
        {
            if (emailAddress == null)
                throw new System.ArgumentNullException("emailAddress");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "connect/v1.0/accounts/find/email/{emailAddress}"
                    urlBuilder_.Append("connect/v1.0/accounts/find/email/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(emailAddress, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConnectAccountRes>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByTelephoneAsync(string telephoneNumber)
        {
            return FindMatchesByTelephoneAsync(telephoneNumber, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectAccountRes>> FindMatchesByTelephoneAsync(string telephoneNumber, System.Threading.CancellationToken cancellationToken)
        {
            if (telephoneNumber == null)
                throw new System.ArgumentNullException("telephoneNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "connect/v1.0/accounts/find/telephone/{telephoneNumber}"
                    urlBuilder_.Append("connect/v1.0/accounts/find/telephone/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(telephoneNumber, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConnectAccountRes>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ConnectAccountRes> GetAccountCreatedStatusAsync(string accountId)
        {
            return GetAccountCreatedStatusAsync(accountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConnectAccountRes> GetAccountCreatedStatusAsync(string accountId, System.Threading.CancellationToken cancellationToken)
        {
            if (accountId == null)
                throw new System.ArgumentNullException("accountId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "connect/v1.0/accounts/{accountId}/createdstatus"
                    urlBuilder_.Append("connect/v1.0/accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/createdstatus");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConnectAccountRes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task NewsletterSignupAsync(string category, string email)
        {
            return NewsletterSignupAsync(category, email, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task NewsletterSignupAsync(string category, string email, System.Threading.CancellationToken cancellationToken)
        {
            if (category == null)
                throw new System.ArgumentNullException("category");

            if (email == null)
                throw new System.ArgumentNullException("email");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "connect/v1.0/newslettersignup/{category}/{email}"
                    urlBuilder_.Append("connect/v1.0/newslettersignup/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateAccountAsync(string accountId, ConnectAccountReq body)
        {
            return UpdateAccountAsync(accountId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateAccountAsync(string accountId, ConnectAccountReq body, System.Threading.CancellationToken cancellationToken)
        {
            if (accountId == null)
                throw new System.ArgumentNullException("accountId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "connect/v1.0/accounts/{accountId}/update"
                    urlBuilder_.Append("connect/v1.0/accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/update");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Precondition Failed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// One of 'individual', 'organization'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"individual")]
        Individual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"organization")]
        Organization = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryChannel
    {
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Channel? Channel { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preference? DefaultPreference { get; set; }

    }

    /// <summary>
    /// One of 'email', 'post', 'sms', 'telephone'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Channel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"post")]
        Post = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"sms")]
        Sms = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"telephone")]
        Telephone = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectAccountCriteria
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountType? AccountType { get; set; }

        [Newtonsoft.Json.JsonProperty("organizationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrganizationName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectAccountReq
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("individual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectIndividualReq Individual { get; set; }

        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectOrganizationReq Organization { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectAddressReq Address { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectEmailReq Email { get; set; }

        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectTelephoneReq Telephone { get; set; }

        [Newtonsoft.Json.JsonProperty("preferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectPreferencesReq Preferences { get; set; }

        [Newtonsoft.Json.JsonProperty("taxStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectTaxStatusReq TaxStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectAccountRes
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("individual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectIndividualRes Individual { get; set; }

        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectOrganizationRes Organization { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectAddressRes Address { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectEmailRes Email { get; set; }

        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectTelephoneRes Telephone { get; set; }

        [Newtonsoft.Json.JsonProperty("preferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectPreferencesRes Preferences { get; set; }

        [Newtonsoft.Json.JsonProperty("taxStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectTaxStatusRes TaxStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectAddressReq
    {
        [Newtonsoft.Json.JsonProperty("line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line1 { get; set; }

        [Newtonsoft.Json.JsonProperty("line2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line2 { get; set; }

        [Newtonsoft.Json.JsonProperty("line3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line3 { get; set; }

        [Newtonsoft.Json.JsonProperty("line4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line4 { get; set; }

        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        [Newtonsoft.Json.JsonProperty("administrativeArea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdministrativeArea { get; set; }

        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country? Country { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectAddressRes
    {
        [Newtonsoft.Json.JsonProperty("line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line1 { get; set; }

        [Newtonsoft.Json.JsonProperty("line2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line2 { get; set; }

        [Newtonsoft.Json.JsonProperty("line3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line3 { get; set; }

        [Newtonsoft.Json.JsonProperty("line4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line4 { get; set; }

        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        [Newtonsoft.Json.JsonProperty("administrativeArea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdministrativeArea { get; set; }

        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country? Country { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectEmailReq
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectEmailRes
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectIndividualReq
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectNameReq Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectIndividualRes
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectNameRes Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectNameReq
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectNameRes
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectOrganizationReq
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectNameReq Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectOrganizationRes
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectNameRes Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectPreferenceSelectionReq
    {
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Channel? Channel { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Preference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectPreferenceSelectionRes
    {
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Channel? Channel { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preference? Preference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectPreferencesReq
    {
        [Newtonsoft.Json.JsonProperty("privacyStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivacyStatement { get; set; }

        [Newtonsoft.Json.JsonProperty("selections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConnectPreferenceSelectionReq> Selections { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectPreferencesRes
    {
        [Newtonsoft.Json.JsonProperty("privacyStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivacyStatement { get; set; }

        [Newtonsoft.Json.JsonProperty("selections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConnectPreferenceSelectionRes> Selections { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectTaxStatusReq
    {
        [Newtonsoft.Json.JsonProperty("canClaim", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanClaim { get; set; }

        [Newtonsoft.Json.JsonProperty("termsIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TermsIdentifier { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectTaxStatusRes
    {
        [Newtonsoft.Json.JsonProperty("canClaim", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanClaim { get; set; }

        [Newtonsoft.Json.JsonProperty("termsIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TermsIdentifier { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectTelephoneReq
    {
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country? Country { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectTelephoneRes
    {
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country? Country { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

    }

    /// <summary>
    /// One of 'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'XK', 'YE', 'YT', 'ZA', 'ZM', 'ZW'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 246,

    }

    /// <summary>
    /// One of 'AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL', 'BSD', 'BTC', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLF', 'CLP', 'CNY', 'COP', 'COU', 'CRC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'ETH', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HTG', 'HUF', 'IDR', 'ILS', 'INR', 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MXV', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLE', 'SOS', 'SRD', 'SSP', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'USN', 'UYI', 'UYU', 'UYW', 'UZS', 'VED', 'VES', 'VND', 'VUV', 'WST', 'XAD', 'XAF', 'XAG', 'XAU', 'XBA', 'XBB', 'XBC', 'XBD', 'XCD', 'XCG', 'XDR', 'XOF', 'XPD', 'XPF', 'XPT', 'XSU', 'XTS', 'XUA', 'XXX', 'YER', 'ZAR', 'ZMW', 'ZWG'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Currency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
        AED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
        AFN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
        AMD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
        ANG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
        AOA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
        ARS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
        AWG = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
        AZN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
        BAM = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
        BBD = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
        BDT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
        BHD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
        BIF = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
        BMD = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
        BND = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
        BOB = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BOV")]
        BOV = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
        BRL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
        BSD = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BTC")]
        BTC = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BTN")]
        BTN = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
        BWP = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BYN")]
        BYN = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
        BZD = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
        CDF = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"CHE")]
        CHE = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"CHW")]
        CHW = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CLF")]
        CLF = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
        CLP = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
        COP = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"COU")]
        COU = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
        CRC = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
        CUP = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
        CVE = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
        DJF = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
        DOP = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
        DZD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
        EGP = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
        ERN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
        ETB = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ETH")]
        ETH = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
        FJD = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
        FKP = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
        GEL = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
        GHS = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
        GIP = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
        GMD = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
        GNF = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
        GTQ = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
        GYD = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
        HNL = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
        HTG = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
        IDR = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
        INR = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
        IQD = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
        IRR = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
        ISK = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
        JMD = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
        JOD = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
        KES = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
        KGS = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
        KHR = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
        KMF = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
        KPW = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
        KRW = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
        KWD = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
        KYD = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
        KZT = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
        LAK = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
        LBP = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
        LKR = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
        LRD = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
        LSL = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
        LYD = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
        MAD = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
        MDL = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
        MGA = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
        MKD = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
        MMK = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
        MNT = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
        MOP = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"MRU")]
        MRU = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
        MUR = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
        MVR = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
        MWK = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"MXV")]
        MXV = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
        MYR = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
        MZN = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
        NAD = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
        NGN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
        NIO = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
        NPR = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
        OMR = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
        PAB = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
        PEN = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
        PGK = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
        PKR = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
        PYG = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
        QAR = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
        RSD = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
        RWF = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
        SAR = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
        SBD = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
        SCR = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"SDG")]
        SDG = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
        SHP = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"SLE")]
        SLE = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
        SOS = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
        SRD = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"SSP")]
        SSP = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"STN")]
        STN = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"SVC")]
        SVC = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
        SYP = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
        SZL = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
        THB = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
        TJS = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"TMT")]
        TMT = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
        TND = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
        TOP = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
        TTD = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
        TWD = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
        TZS = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
        UAH = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
        UGX = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"USN")]
        USN = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
        UYI = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
        UYU = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"UYW")]
        UYW = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
        UZS = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"VED")]
        VED = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"VES")]
        VES = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
        VND = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
        VUV = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
        WST = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"XAD")]
        XAD = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
        XAF = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"XAG")]
        XAG = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"XAU")]
        XAU = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"XBA")]
        XBA = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"XBB")]
        XBB = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"XBC")]
        XBC = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"XBD")]
        XBD = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
        XCD = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"XCG")]
        XCG = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"XDR")]
        XDR = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
        XOF = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"XPD")]
        XPD = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
        XPF = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"XPT")]
        XPT = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"XSU")]
        XSU = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"XTS")]
        XTS = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"XUA")]
        XUA = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"XXX")]
        XXX = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
        YER = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
        ZMW = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWG")]
        ZWG = 181,

    }

    /// <summary>
    /// One of 'dmy_dashes', 'dmy_slashes', 'mdy_dashes', 'mdy_slashes', 'ymd_dashes', 'ymd_slashes'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DateFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"dmy_dashes")]
        Dmy_dashes = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dmy_slashes")]
        Dmy_slashes = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mdy_dashes")]
        Mdy_dashes = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"mdy_slashes")]
        Mdy_slashes = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ymd_dashes")]
        Ymd_dashes = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ymd_slashes")]
        Ymd_slashes = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateTimeZone
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("minOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Offset MinOffset { get; set; }

        [Newtonsoft.Json.JsonProperty("maxOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Offset MaxOffset { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ILocalizationSettings
    {
        [Newtonsoft.Json.JsonProperty("numberFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NumberFormat? NumberFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("dateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DateFormat? DateFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("timeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeFormat? TimeFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Language? Language { get; set; }

        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }

    }

    /// <summary>
    /// One of 'en', 'es', 'fr', 'xx'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Language
    {

        [System.Runtime.Serialization.EnumMember(Value = @"en")]
        En = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"xx")]
        Xx = 3,

    }

    /// <summary>
    /// One of 'eu1', 'eu2', 'international'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NumberFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"eu1")]
        Eu1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"eu2")]
        Eu2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"international")]
        International = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Offset
    {
        [Newtonsoft.Json.JsonProperty("seconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seconds { get; set; }

        [Newtonsoft.Json.JsonProperty("milliseconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Milliseconds { get; set; }

        [Newtonsoft.Json.JsonProperty("ticks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Ticks { get; set; }

        [Newtonsoft.Json.JsonProperty("nanoseconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Nanoseconds { get; set; }

    }

    /// <summary>
    /// One of 'noResponse', 'optIn', 'optOut'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Preference
    {

        [System.Runtime.Serialization.EnumMember(Value = @"noResponse")]
        NoResponse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"optIn")]
        OptIn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"optOut")]
        OptOut = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReferenceType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    /// <summary>
    /// One of 'AC', 'AL', 'AS', 'AT', 'BD', 'BP', 'BX', 'CA', 'CC', 'CF', 'CL', 'CM', 'CO', 'CR', 'CS', 'DD', 'DE', 'DF', 'DI', 'DN', 'DQ', 'DR', 'DS', 'DT', 'EM', 'FB', 'FO', 'FS', 'HH', 'LG', 'LH', 'LS', 'OB', 'PC', 'PL', 'PM', 'PR', 'RC', 'RF', 'RG', 'RI', 'RP', 'SB', 'SC', 'SG', 'SH', 'SM', 'SP', 'SS', 'TC', 'TD', 'TG', 'TI', 'TK', 'TM', 'TR', 'WA', 'WC', 'WH'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AC")]
        AC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BP")]
        BP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"BX")]
        BX = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CS")]
        CS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"DD")]
        DD = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DF")]
        DF = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DI")]
        DI = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"DN")]
        DN = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"DQ")]
        DQ = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"DR")]
        DR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"DS")]
        DS = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"DT")]
        DT = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"EM")]
        EM = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"FB")]
        FB = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"FS")]
        FS = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"HH")]
        HH = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"LG")]
        LG = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"LH")]
        LH = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"OB")]
        OB = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"PC")]
        PC = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"RC")]
        RC = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"RF")]
        RF = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"RG")]
        RG = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"RI")]
        RI = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"RP")]
        RP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SP")]
        SP = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"TI")]
        TI = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"WA")]
        WA = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"WC")]
        WC = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"WH")]
        WH = 58,

    }

    /// <summary>
    /// One of '12', '24'
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TimeFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"12")]
        _12 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"24")]
        _24 = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625