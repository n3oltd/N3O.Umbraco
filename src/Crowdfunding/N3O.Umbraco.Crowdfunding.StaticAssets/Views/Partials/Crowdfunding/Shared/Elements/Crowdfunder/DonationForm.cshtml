@model ICrowdfunderViewModel

@inject IPartialText PartialText

@{
    PartialText.SetPartialName("CrowdfundingCrowdfunderDonationForm");
}

<div class="cta__wrapper" data-crowdfunder-id="@Model.Content.Key" data-crowdfunder-type="@Model.CrowdfunderType.Id">
    <div class="cta" id="showMoreWrapper">
        <div class="cta__title start">
            <h2>@PartialText.Get("Contribute to this page")</h2>

            @if (Model.Goals.Count > 1) {
                <p>@PartialText.Get("Select which project(s) you would like to support.")</p>
            }
        </div>
        
        @foreach (var goal in Model.Goals) {
            <input type="hidden" name="goal" value="@goal.Id"/>
            
            <div class="ctaFund showMore big">
                <h4 id="goal-name-@goal.Id">@goal.Name</h4>

                @foreach (var priceHandle in goal.PriceHandles) {
                    <div class="ctaFund__item">
                        <input type="checkbox" name="goal-price-@goal.Id"
                               @foreach (var currencyAmountValue in priceHandle.CurrencyAmountValues) {
                                   @Html.Raw($"data-goal-amount-{currencyAmountValue.Key.Code.ToLower()}=\"{currencyAmountValue.Value.Amount}\" ")
                               }
                               
                               data-goal-amount="@priceHandle.Amount.Amount" />
        
                        <div class="ctaFund__item-inner">
                            @{
                                var priceHandleAmount = priceHandle.CurrencyAmountValues[Model.SiteCurrency];
                            }
                            
                            <h3>@Model.Formatter.Number.FormatMoney(priceHandleAmount)</h3>
                            
                            <hr/>

                            <p class="subtle">@priceHandle.Description</p>

                            <svg>
                                <use xlink:href="#checkIcon"></use>
                            </svg>
                        </div>
                    </div>
                }
                
                <div class="ctaAmount">
                    <input type="checkbox" name="custom-goal-@goal.Id"/>
                    
                    <div class="ctaAmount__inner">
                        <div class="subtle">@PartialText.Get("Custom Amount")</div>
                        
                        <div class="cta__input">
                            <label class="large n3o-currency-label" for="goal-custom-amount-symbol-@goal.Id"> @Model.SiteCurrency.Symbol </label>
                            
                            <input id="goal-custom-amount-@goal.Id" disabled type="number" />
                            
                            <div class="cta__input-select">
                                @*TODO currency*@
                                <select class="n3o-currency-picker" name="currency" id="currency-@goal.Id">
                                    @foreach (var currency in Model.Currencies) {
                                        <!option value="@currency.Id" data-currency data-symbol="@currency.Symbol" @if (currency == Model.SiteCurrency) { <text>selected="selected"</text> }>@currency.Code</!option>
                                    }
                                </select>
                            </div>
                        </div>
                        <svg>
                            <use xlink:href="#checkIcon"></use>
                        </svg>
                    </div>
                </div>

                <div class="large showMoreBtn">@PartialText.Get("More Options")</div>
            </div>
        }
        <div class="cta__foot">
            <button type="button" id="submit-donation" class="button primary submit3" disabled>
                @PartialText.Get("Donate")
                <span></span>
            </button>
        </div>
    </div>
</div>

<script>
    const n3o_cdf_donationCart = (() => {        
        let n3oSelectedCurrency = '@Model.SiteCurrency.Code.ToLowerInvariant()';
    
        const submitCrowdfundingCartReq = async req => {
            try {
                const response = await fetch('/umbraco/api/crowdfunding/addToCart', {
                    method: "POST",
                    body: JSON.stringify(req),
                    headers: {
                        "Content-Type": "application/json"
                    }
                });

                if (response.ok) {
                    window.themeConfig.showCart();
                    
                    hideDonationSummaryModal();
                } else {
                    window.themeConfig.showError(response.errors)
                }
            }
            catch (e) {
                window.themeConfig.showError(e.errors)
            }
        }
        
        const changeCurrency = async req => {
            try {
                const response = await fetch(`/umbraco/api/giving/currency/${req}`, {
                    method: "POST"                    
                });

                if (response.ok) {                   
                    return true;
                } else {
                    window.themeConfig.showError(response.errors);
                    
                    return false;
                }
            } catch (e) {
                window.themeConfig.showError(e.errors);
            }
        }

        function handleDonationReq() {
            let crowdfundingCartReq = {};

            const items = [];
            const goalInputs = document.querySelectorAll("input[name='goal']")

            goalInputs.forEach(input => {
                const goalId = input.value;

                const crowdfundingCartItemReq = {};
                const goalValue = {};

                const goalPriceElement = document.querySelector(`input[name='goal-price-${goalId}']`);
                const customPriceElement = document.querySelector(`input[name='custom-goal-${goalId}']`);

                const hasAmount = goalPriceElement.checked || customPriceElement.checked;

                if (!hasAmount) {
                    return
                }

                if (goalPriceElement.checked) {
                    goalValue.amount = goalPriceElement.dataset[`goalAmount${capitalizeFirstLetter(n3oSelectedCurrency)}`];
                } else if (customPriceElement.checked) {
                    goalValue.amount = document.querySelector(`#goal-custom-amount-${goalId}`).value;
                }

                goalValue.currency = document.querySelector(`#currency-${goalId}`).value;
                
                crowdfundingCartItemReq.goalId = goalId;
                crowdfundingCartItemReq.value = goalValue;

                items.push(crowdfundingCartItemReq);
            });

            let wrapperElement = document.querySelector('[data-crowdfunder-id]');

            let crowdfunderData = {
                crowdfunderId: wrapperElement.dataset.crowdfunderId,
                comment: document.querySelector('#donors-comment')?.value,
                anonymous: document.querySelector('#donor-is-anonymous')?.checked
            };

            crowdfundingCartReq.crowdfunding = crowdfunderData;
            crowdfundingCartReq.type = wrapperElement.dataset.crowdfunderType;
            crowdfundingCartReq.items = items;

            if (items.length) {
                submitCrowdfundingCartReq(crowdfundingCartReq)
            }
        }

        function handleDonationSummaryModal() {
            const items = [];
            const goalInputs = document.querySelectorAll("input[name='goal']")

            goalInputs.forEach(input => {
                const goalId = input.value;

                const goalName = document.querySelector(`#goal-name-${goalId}`).textContent.trim();

                const goalPriceHandleElement = document.querySelector(`input[name='goal-price-${goalId}']:checked`);
                const customPriceElement = document.querySelector(`input[name='custom-goal-${goalId}']:checked`);
                const hasAmount = goalPriceHandleElement !== null || customPriceElement !== null;

                if (!hasAmount) {
                    return;
                }

                if (goalPriceHandleElement !== null) {
                    const ctaFundItemInner = goalPriceHandleElement.nextElementSibling;
                    let priceHandleAmount = ctaFundItemInner.querySelector('h3').textContent;
                    const priceHandleDescription = ctaFundItemInner.querySelector('p').textContent;

                    let priceHandleObj = {
                        title: goalName,
                        amount: priceHandleAmount.trim(),
                        description: priceHandleDescription.trim()
                    };

                    items.push(priceHandleObj);
                }

                if (customPriceElement !== null) {
                    let amountElem = document.querySelector(`#goal-custom-amount-${goalId}`);
                    let currencyElem =  amountElem.previousElementSibling;

                    let price = currencyElem.textContent.trim() + ' ' + amountElem.value;

                    let priceHandleObj = {
                        title: goalName,
                        amount: price,
                        description: '@PartialText.Get("Your custom amount")'
                    };

                    items.push(priceHandleObj);
                }
            });

            if (items.length) {
                const modal = document.getElementById('donationSummary-modal');

                const existingItems = modal.querySelectorAll('.ctaFund');
                existingItems.forEach(item => item.remove());

                const insertAfterElement = modal.querySelector('.cta__title.start');

                items.reverse();

                items.forEach(item => {
                    const fundBlock = createFundBlock(item);
                    
                    insertAfterElement.insertAdjacentElement('afterend', fundBlock);
                });

                showDonationSummaryModal();
            }
        }
        
        function handleCurrencySelection() {
            const currencyPickers = document.querySelectorAll('.n3o-currency-picker');

            currencyPickers.forEach(function(picker) {
                picker.addEventListener('change', function(event) {
                    let selectedOption = event.target.options[event.target.selectedIndex];
                    let currencyId = selectedOption.value;
                    let currencySymbol = selectedOption.getAttribute('data-symbol');

                    let success = changeCurrency(currencyId);
                    
                    if (!success) {
                        return;
                    }

                    n3oSelectedCurrency = currencyId;
                    
                    let currencyLabels = document.querySelectorAll('.n3o-currency-label');
                    
                    currencyLabels.forEach(function(label) {
                        label.textContent = currencySymbol;
                    });
                    
                    let goalPriceHandles = document.querySelectorAll('.ctaFund__item');
                    
                    goalPriceHandles.forEach(function (priceHandle) {
                        let inputElement = priceHandle.querySelector('input');
                        let goalAmount = inputElement.getAttribute(`data-goal-amount-${n3oSelectedCurrency}`);
                        let h3Element= priceHandle.querySelector('h3');
                        
                        h3Element.textContent = `${currencySymbol} ${goalAmount}`;
                    });

                    currencyPickers.forEach( otherPicker => {
                        otherPicker.value = n3oSelectedCurrency;
                    });
                });
            });
        }

        function createFundBlock(item) {
            // Create the outer div with class ctaFund
            const ctaFundDiv = document.createElement('div');
            ctaFundDiv.classList.add('ctaFund');

            // Create the h4 title
            const h4 = document.createElement('h4');
            h4.textContent = item.title;
            ctaFundDiv.appendChild(h4);

            // Create the inner div structure
            const ctaFundItemDiv = document.createElement('div');
            ctaFundItemDiv.classList.add('ctaFund__item');
            const input = document.createElement('input');
            input.type = 'radio';
            input.name = 'fundOption'; // Ensure all radios have the same name for exclusive selection
            ctaFundItemDiv.appendChild(input);

            const innerDiv = document.createElement('div');
            innerDiv.classList.add('ctaFund__item-inner', 'uniq');

            const h3 = document.createElement('h3');
            h3.textContent = item.amount;
            innerDiv.appendChild(h3);

            const hr = document.createElement('hr');
            innerDiv.appendChild(hr);

            const p = document.createElement('p');
            p.classList.add('subtle');
            p.textContent = item.description;
            innerDiv.appendChild(p);

            ctaFundItemDiv.appendChild(innerDiv);
            ctaFundDiv.appendChild(ctaFundItemDiv);

            return ctaFundDiv;
        }

        function capitalizeFirstLetter(str) {
            if (!str) return str;
            
            return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
        }

        return {
            handleDonationReq,
            handleDonationSummaryModal,
            handleCurrencySelection,
            createFundBlock
        }
    })();

    document.getElementById('submit-donation')?.addEventListener?.('click', n3o_cdf_donationCart.handleDonationSummaryModal);

    document.addEventListener('DOMContentLoaded', function() {
        document.getElementById('add-donation-to-cart')?.addEventListener?.('click', n3o_cdf_donationCart.handleDonationReq);
    });

    n3o_cdf_donationCart.handleCurrencySelection();

    const showDonationSummaryModal = () => {
        document.getElementById('donationSummary-modal')?.classList.add("active");
    };

    const hideDonationSummaryModal = () => {
        document.getElementById('donationSummary-modal')?.classList.remove("active");
    };
</script>