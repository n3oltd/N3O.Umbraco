@model ViewEditFundraiserViewModel

@inject IPartialText PartialText

@{
    PartialText.SetPartialName("ViewEditFundraiserPage");
}

@if (!Model.Content.Status.HasValue()) {
    <div class="n3o-modalsItem modall active" id="confirmAccount-modal">
        <div class="n3o-auth__wrapper" style="margin: auto; width: 90vw;">
            <div class="n3o-auth">
                <div class="n3o-auth__title">
                    <h2 class="n3o-h2">@PartialText.Get("Please Wait...")</h2>

                    <p class="n3o-p">@PartialText.Get("Page setup in progress, you will be able to view or edit the page shortly.")</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("click", handler, true);

        function handler(e) {
            e.stopPropagation();
            e.preventDefault();
        }
    </script>
}

@Html.CrowdfundingPartial("~/Views/Partials/Crowdfunding/Shared/Elements/Crowdfunder.cshtml", Model)

<script type="text/javascript">
    const n3o_cdf_pageApi = (() => {
        const activatePage = async pageId => {
            
            try {
                const response = await fetch(`/umbraco/api/Crowdfunding/fundraisers/${pageId}/activate`, {
                    method: "POST"
                })

                return response.ok
                 
            } catch (e) {
                console.error(e)
            }

            return false;
        }

        const deactivatePage = async pageId => {
           try {
                const response = await fetch(`/umbraco/api/Crowdfunding/fundraisers/${pageId}/deactivate`, {
                    method: "POST"
                });

                return response.ok;
            } catch (e) {
                console.error(e);
            }

            return false;
        }

        return {
            activatePage,
            deactivatePage
        };
    })();

    (() => {
        const urlParams = new URLSearchParams(window.location.search);
        const crowdfundingApiKey = urlParams.get('Crowdfunding-API-Key');
        const cookieName = 'Crowdfunding-API-Key';
        if (!crowdfundingApiKey) {
            return;
        }
        const existingCookie = document.cookie
            .split('; ')
            .find(row => row.startsWith(`${cookieName}=`))
            ?.split('=')[1];
        if (existingCookie === crowdfundingApiKey) {
            return;
        }
        document.cookie = `${cookieName}=${crowdfundingApiKey}; path=/;`;
        window.location.reload();
    })();


    (() => {
        const pageIdElm = document.querySelector('[data-page-id]');
        
        if (!pageIdElm || !pageIdElm.dataset.pageId) {
            return;
        }

        const pageId = pageIdElm.dataset.pageId;

        const handlePageActivation = () => {
            const activateButton = document.getElementById('n3o-btn-banner-activate');

           if (activateButton) {
               activateButton.addEventListener('click', async () => {
                   activateButton.pointerEvents = "none"
               
                   const success = await n3o_cdf_pageApi.activatePage(pageId);
               
                   if (success) {
                       window.location.reload();
                   }
               
                   activateButton.pointerEvents = "";
               });
           }
        };

        const handlePageDeactivation = () => {
            const deactivateButton = document.getElementById('n3o-btn-banner-deactivate');

            if (deactivateButton) {
                deactivateButton.addEventListener('click', async () => {
                    deactivateButton.pointerEvents = "none";
                    
                    const success = await n3o_cdf_pageApi.deactivatePage(pageId);
                    
                    if (success) {
                        window.location.reload();
                    }

                    deactivateButton.pointerEvents = "none";
                })
            }
         }

         const handleOverDonation = () => {
            const resolveButton = document.getElementById('n3o-unallocated-resolve');

            if (resolveButton) {
                resolveButton.addEventListener('click', async () => {
                    window.__openGoalEditor();
                })
            }
         }

        const handlePreviewPage = () => {
            const viewPageButton = document.querySelector('.n3o-banner-view-page');
            
            if (viewPageButton) {
                viewPageButton.addEventListener('click', async () => {
                    var url = new URL(window.location.href)
                    url.searchParams.append("preview", true);
                    window.open(url.href, "_blank")
                })
            }            
        }

        handlePageActivation();
        handlePageDeactivation();
        handleOverDonation();
        handlePreviewPage();

    })();
</script>