//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
var CheckoutClient = /** @class */ (function () {
    function CheckoutClient(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== null && baseUrl !== void 0 ? baseUrl : "https://localhost:6001";
    }
    CheckoutClient.prototype.getCurrentCheckout = function () {
        var _this = this;
        var url_ = this.baseUrl + "/umbraco/api/Checkout/current";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetCurrentCheckout(_response);
        });
    };
    CheckoutClient.prototype.processGetCurrentCheckout = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then(function (_responseText) {
                var result400 = null;
                result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 500) {
            return response.text().then(function (_responseText) {
                return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        }
        else if (status === 404) {
            return response.text().then(function (_responseText) {
                var result404 = null;
                result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    CheckoutClient.prototype.getLookupCheckoutStages = function () {
        var _this = this;
        var url_ = this.baseUrl + "/umbraco/api/Checkout/lookups/checkoutStages";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetLookupCheckoutStages(_response);
        });
    };
    CheckoutClient.prototype.processGetLookupCheckoutStages = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then(function (_responseText) {
                var result400 = null;
                result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 500) {
            return response.text().then(function (_responseText) {
                return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        }
        else if (status === 404) {
            return response.text().then(function (_responseText) {
                var result404 = null;
                result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    CheckoutClient.prototype.getRegularGivingFrequencies = function () {
        var _this = this;
        var url_ = this.baseUrl + "/umbraco/api/Checkout/lookups/regularGivingFrequencies";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetRegularGivingFrequencies(_response);
        });
    };
    CheckoutClient.prototype.processGetRegularGivingFrequencies = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then(function (_responseText) {
                var result400 = null;
                result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 500) {
            return response.text().then(function (_responseText) {
                return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        }
        else if (status === 404) {
            return response.text().then(function (_responseText) {
                var result404 = null;
                result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    CheckoutClient.prototype.updateAccount = function (checkoutRevisionId, req) {
        var _this = this;
        var url_ = this.baseUrl + "/umbraco/api/Checkout/{checkoutRevisionId}/account";
        if (checkoutRevisionId === undefined || checkoutRevisionId === null)
            throw new Error("The parameter 'checkoutRevisionId' must be defined.");
        url_ = url_.replace("{checkoutRevisionId}", encodeURIComponent("" + checkoutRevisionId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(req);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUpdateAccount(_response);
        });
    };
    CheckoutClient.prototype.processUpdateAccount = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then(function (_responseText) {
                var result400 = null;
                result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 500) {
            return response.text().then(function (_responseText) {
                return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        }
        else if (status === 412) {
            return response.text().then(function (_responseText) {
                var result412 = null;
                result412 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result412);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    CheckoutClient.prototype.updateAccountConsent = function (checkoutRevisionId, req) {
        var _this = this;
        var url_ = this.baseUrl + "/umbraco/api/Checkout/{checkoutRevisionId}/account/consent";
        if (checkoutRevisionId === undefined || checkoutRevisionId === null)
            throw new Error("The parameter 'checkoutRevisionId' must be defined.");
        url_ = url_.replace("{checkoutRevisionId}", encodeURIComponent("" + checkoutRevisionId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(req);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUpdateAccountConsent(_response);
        });
    };
    CheckoutClient.prototype.processUpdateAccountConsent = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then(function (_responseText) {
                var result400 = null;
                result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 500) {
            return response.text().then(function (_responseText) {
                return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        }
        else if (status === 412) {
            return response.text().then(function (_responseText) {
                var result412 = null;
                result412 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result412);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    CheckoutClient.prototype.updateAccountTaxStatus = function (checkoutRevisionId, req) {
        var _this = this;
        var url_ = this.baseUrl + "/umbraco/api/Checkout/{checkoutRevisionId}/account/taxStatus";
        if (checkoutRevisionId === undefined || checkoutRevisionId === null)
            throw new Error("The parameter 'checkoutRevisionId' must be defined.");
        url_ = url_.replace("{checkoutRevisionId}", encodeURIComponent("" + checkoutRevisionId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(req);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUpdateAccountTaxStatus(_response);
        });
    };
    CheckoutClient.prototype.processUpdateAccountTaxStatus = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then(function (_responseText) {
                var result400 = null;
                result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 500) {
            return response.text().then(function (_responseText) {
                return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        }
        else if (status === 412) {
            return response.text().then(function (_responseText) {
                var result412 = null;
                result412 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result412);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    CheckoutClient.prototype.updateRegularGivingOptions = function (checkoutRevisionId, req) {
        var _this = this;
        var url_ = this.baseUrl + "/umbraco/api/Checkout/{checkoutRevisionId}/regularGiving/options";
        if (checkoutRevisionId === undefined || checkoutRevisionId === null)
            throw new Error("The parameter 'checkoutRevisionId' must be defined.");
        url_ = url_.replace("{checkoutRevisionId}", encodeURIComponent("" + checkoutRevisionId));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(req);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUpdateRegularGivingOptions(_response);
        });
    };
    CheckoutClient.prototype.processUpdateRegularGivingOptions = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then(function (_responseText) {
                var result400 = null;
                result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 500) {
            return response.text().then(function (_responseText) {
                return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        }
        else if (status === 412) {
            return response.text().then(function (_responseText) {
                var result412 = null;
                result412 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result412);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    CheckoutClient.prototype.getAllLookups = function (criteria) {
        var _this = this;
        var url_ = this.baseUrl + "/umbraco/api/Checkout/lookups/all";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(criteria);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetAllLookups(_response);
        });
    };
    CheckoutClient.prototype.processGetAllLookups = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then(function (_responseText) {
                var result400 = null;
                result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 500) {
            return response.text().then(function (_responseText) {
                return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        }
        else if (status === 412) {
            return response.text().then(function (_responseText) {
                var result412 = null;
                result412 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                return throwException("A server side error occurred.", status, _responseText, _headers, result412);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return CheckoutClient;
}());
export { CheckoutClient };
/** One of 'individual', 'organization' */
export var AccountType;
(function (AccountType) {
    AccountType["Individual"] = "individual";
    AccountType["Organization"] = "organization";
})(AccountType || (AccountType = {}));
/** One of 'business' */
export var OrganizationType;
(function (OrganizationType) {
    OrganizationType["Business"] = "business";
})(OrganizationType || (OrganizationType = {}));
/** One of 'email', 'sms', 'post', 'telephone' */
export var ConsentChannel;
(function (ConsentChannel) {
    ConsentChannel["Email"] = "email";
    ConsentChannel["Sms"] = "sms";
    ConsentChannel["Post"] = "post";
    ConsentChannel["Telephone"] = "telephone";
})(ConsentChannel || (ConsentChannel = {}));
/** One of 'noResponse', 'optIn', 'optOut' */
export var ConsentResponse;
(function (ConsentResponse) {
    ConsentResponse["NoResponse"] = "noResponse";
    ConsentResponse["OptIn"] = "optIn";
    ConsentResponse["OptOut"] = "optOut";
})(ConsentResponse || (ConsentResponse = {}));
/** One of 'payer', 'nonPayer', 'notSpecified' */
export var TaxStatus;
(function (TaxStatus) {
    TaxStatus["Payer"] = "payer";
    TaxStatus["NonPayer"] = "nonPayer";
    TaxStatus["NotSpecified"] = "notSpecified";
})(TaxStatus || (TaxStatus = {}));
/** One of 'feedback', 'fund', 'sponsorship' */
export var AllocationType;
(function (AllocationType) {
    AllocationType["Feedback"] = "feedback";
    AllocationType["Fund"] = "fund";
    AllocationType["Sponsorship"] = "sponsorship";
})(AllocationType || (AllocationType = {}));
/** One of 'donation', 'regularGiving' */
export var GivingType;
(function (GivingType) {
    GivingType["Donation"] = "donation";
    GivingType["RegularGiving"] = "regularGiving";
})(GivingType || (GivingType = {}));
/** One of 'bool', 'date', 'text' */
export var FeedbackCustomFieldType;
(function (FeedbackCustomFieldType) {
    FeedbackCustomFieldType["Bool"] = "bool";
    FeedbackCustomFieldType["Date"] = "date";
    FeedbackCustomFieldType["Text"] = "text";
})(FeedbackCustomFieldType || (FeedbackCustomFieldType = {}));
/** One of '_6', '_12', '_18', '_24', '_36', '_48', '_60' */
export var SponsorshipDuration;
(function (SponsorshipDuration) {
    SponsorshipDuration["_6"] = "_6";
    SponsorshipDuration["_12"] = "_12";
    SponsorshipDuration["_18"] = "_18";
    SponsorshipDuration["_24"] = "_24";
    SponsorshipDuration["_36"] = "_36";
    SponsorshipDuration["_48"] = "_48";
    SponsorshipDuration["_60"] = "_60";
})(SponsorshipDuration || (SponsorshipDuration = {}));
/** One of 'credential', 'payment' */
export var PaymentObjectType;
(function (PaymentObjectType) {
    PaymentObjectType["Credential"] = "credential";
    PaymentObjectType["Payment"] = "payment";
})(PaymentObjectType || (PaymentObjectType = {}));
/** One of 'complete', 'error', 'inProgress' */
export var PaymentObjectStatus;
(function (PaymentObjectStatus) {
    PaymentObjectStatus["Complete"] = "complete";
    PaymentObjectStatus["Error"] = "error";
    PaymentObjectStatus["InProgress"] = "inProgress";
})(PaymentObjectStatus || (PaymentObjectStatus = {}));
/** One of 'annually', 'monthly', 'quarterly' */
export var RegularGivingFrequency;
(function (RegularGivingFrequency) {
    RegularGivingFrequency["Annually"] = "annually";
    RegularGivingFrequency["Monthly"] = "monthly";
    RegularGivingFrequency["Quarterly"] = "quarterly";
})(RegularGivingFrequency || (RegularGivingFrequency = {}));
var ApiException = /** @class */ (function (_super) {
    __extends(ApiException, _super);
    function ApiException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isApiException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    ApiException.isApiException = function (obj) {
        return obj.isApiException === true;
    };
    return ApiException;
}(Error));
export { ApiException };
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
//# sourceMappingURL=index.js.map